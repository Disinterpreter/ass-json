package ass2json

import (
	"encoding/json"
	"fmt"
	"strconv"
	"strings"
)

type JSONSubtitle struct {
	ScriptInfo struct {
		Title                 string `json:"Title"`
		ScriptType            string `json:"ScriptType"`
		WarpStyle             int    `json:"WarpStyle"`
		ScaledBorderAndShadow string `json:"ScaledBorderAndShadow"`
		YCbCrMatrix           string `json:"YCbCr_Matrix"`
		PlayResX              int    `json:"PlayResX"`
		PlayResY              int    `json:"PlayResY"`
	} `json:"ScriptInfo"`
	APG struct {
		LastStyleStorage string  `json:"Last_Style_Storage"`
		AudioFile        string  `json:"Audio_File"`
		VideoFile        string  `json:"Video_File"`
		VideoARMode      int     `json:"Video_AR_Mode"`
		VideoARValue     float64 `json:"Video_AR_Value"`
		VideoZoomPercent float64 `json:"Video_Zoom_Percent"`
		ScrollPosition   int     `json:"Scroll_Position"`
		ActiveLine       int     `json:"Active_Line"`
		VideoPosition    int     `json:"Video_Position"`
	} `json:"APG"`
	Styles []struct {
		Name           string  `json:"Name"`
		Fontname       string  `json:"Fontname"`
		Fontsize       int     `json:"Fontsize"`
		PrimaryColor   string  `json:"PrimaryColor"`
		SecondaryColor string  `json:"SecondaryColor"`
		OutlineColor   string  `json:"OutlineColor"`
		BackColor      string  `json:"BackColor"`
		Bold           int     `json:"Bold"`
		Italic         int     `json:"Italic"`
		Underline      int     `json:"Underline"`
		StrikeOut      int     `json:"StrikeOut"`
		ScaleX         int     `json:"ScaleX"`
		ScaleY         int     `json:"ScaleY"`
		Spacing        int     `json:"Spacing"`
		Angle          float64 `json:"Angle"`
		BorderStyle    float64 `json:"BorderStyle"`
		Outline        float64 `json:"Outline"`
		Shadow         float64 `json:"Shadow"`
		Alignment      int     `json:"Alignment"`
		MarginL        int     `json:"MarginL"`
		MarginR        int     `json:"MarginR"`
		MarginV        int     `json:"MarginV"`
		Encoding       int     `json:"Encoding"`
	} `json:"Styles"`
	Events []struct {
		DorC    bool   `json:"DorC"`
		Layer   int    `json:"Layer"`
		Start   string `json:"Start"`
		End     string `json:"End"`
		Style   string `json:"Style"`
		Name    string `json:"Name"`
		MarginL int    `json:"MarginL"`
		MarginR int    `json:"MarginR"`
		MarginV int    `json:"MarginV"`
		Effect  string `json:"Effect"`
		Text    string `json:"Text"`
	} `json:"Events"`
}

func Json2ass(bt []byte) {

	var unm JSONSubtitle

	json.Unmarshal(bt, &unm)

	// log.Println(unm.ScriptInfo.Title)

	var scinfo []string

	//scinfo[0] = "[Script Info]"
	scinfo = append(scinfo, "[Script Info]")
	scinfo = append(scinfo, "; Script generated by ASS->JSON Parser")
	scinfo = append(scinfo, "; https://github.com/Disinterpreter/ass-json")
	scinfo = append(scinfo, "Title: "+unm.ScriptInfo.Title)
	scinfo = append(scinfo, "ScriptType: "+unm.ScriptInfo.ScriptType)
	scinfo = append(scinfo, "WrapStyle: "+strconv.Itoa(unm.ScriptInfo.WarpStyle))
	scinfo = append(scinfo, "ScaledBorderAndShadow: "+unm.ScriptInfo.ScaledBorderAndShadow)
	scinfo = append(scinfo, "YCbCr Matrix: "+unm.ScriptInfo.YCbCrMatrix)
	scinfo = append(scinfo, "PlayResX: "+strconv.Itoa(unm.ScriptInfo.PlayResX))
	scinfo = append(scinfo, "PlayResY: "+strconv.Itoa(unm.ScriptInfo.PlayResY))
	scinfo = append(scinfo, "")

	sclast := strings.Join(scinfo, "\n")
	fmt.Println(sclast)
	//log.Println(sclast)

	var apgcoll []string

	apgcoll = append(apgcoll, "[Aegisub Project Garbage]")
	apgcoll = append(apgcoll, "Last Style Storage: "+unm.APG.LastStyleStorage)
	apgcoll = append(apgcoll, "Audio File: "+unm.APG.AudioFile)
	apgcoll = append(apgcoll, "Video File: "+unm.APG.VideoFile)
	apgcoll = append(apgcoll, "Video AR Mode: "+strconv.Itoa(unm.APG.VideoARMode))
	varl := fmt.Sprintf("%f", unm.APG.VideoARValue)
	apgcoll = append(apgcoll, "Video AR Value: "+varl)
	vzp := fmt.Sprintf("%f", unm.APG.VideoZoomPercent)
	apgcoll = append(apgcoll, "Video Zoom Percent: "+vzp)
	apgcoll = append(apgcoll, "Scroll Position: "+strconv.Itoa(unm.APG.ScrollPosition))
	apgcoll = append(apgcoll, "Active Line: "+strconv.Itoa(unm.APG.ActiveLine))
	apgcoll = append(apgcoll, "Video Position: "+strconv.Itoa(unm.APG.VideoPosition))
	apgcoll = append(apgcoll, "")

	apglast := strings.Join(apgcoll, "\n")
	fmt.Println(apglast)

	var v4styles []string

	v4styles = append(v4styles, "[V4+ Styles]")
	v4styles = append(v4styles, "Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding")
	for _, style := range unm.Styles {
		//log.Println(style)
		var styelarr []string
		styelarr = append(styelarr, "Style: "+style.Name)
		styelarr = append(styelarr, style.Fontname)
		styelarr = append(styelarr, strconv.Itoa(style.Fontsize))
		styelarr = append(styelarr, style.PrimaryColor)
		styelarr = append(styelarr, style.SecondaryColor)
		styelarr = append(styelarr, style.OutlineColor)
		styelarr = append(styelarr, style.BackColor)
		styelarr = append(styelarr, strconv.Itoa(style.Bold))
		styelarr = append(styelarr, strconv.Itoa(style.Italic))
		styelarr = append(styelarr, strconv.Itoa(style.Underline))
		styelarr = append(styelarr, strconv.Itoa(style.StrikeOut))
		styelarr = append(styelarr, strconv.Itoa(style.ScaleX))
		styelarr = append(styelarr, strconv.Itoa(style.ScaleY))
		styelarr = append(styelarr, strconv.Itoa(style.Spacing))
		styelarr = append(styelarr, fmt.Sprintf("%f", style.Angle))
		styelarr = append(styelarr, fmt.Sprintf("%f", style.BorderStyle))
		styelarr = append(styelarr, fmt.Sprintf("%f", style.Outline))
		styelarr = append(styelarr, fmt.Sprintf("%f", style.Shadow))
		styelarr = append(styelarr, strconv.Itoa(style.Alignment))
		styelarr = append(styelarr, strconv.Itoa(style.MarginL))
		styelarr = append(styelarr, strconv.Itoa(style.MarginR))
		styelarr = append(styelarr, strconv.Itoa(style.MarginV))
		styelarr = append(styelarr, strconv.Itoa(style.Encoding))
		stylej := strings.Join(styelarr, ",")
		v4styles = append(v4styles, stylej)
	}
	v4styles = append(v4styles, "")

	styleslast := strings.Join(v4styles, "\n")
	fmt.Println(styleslast)
	//log.Println(apglast)

	var evs []string

	evs = append(evs, "[Events]")
	evs = append(evs, "Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text")
	for _, ev := range unm.Events {
		var evarr []string
		if ev.DorC == true {
			evarr = append(evarr, "Dialogue: "+strconv.Itoa(ev.Layer))
		} else {
			evarr = append(evarr, "Comment: "+strconv.Itoa(ev.Layer))
		}
		evarr = append(evarr, ev.Start)
		evarr = append(evarr, ev.End)
		evarr = append(evarr, ev.Style)
		evarr = append(evarr, ev.Name)
		evarr = append(evarr, strconv.Itoa(ev.MarginL))
		evarr = append(evarr, strconv.Itoa(ev.MarginR))
		evarr = append(evarr, strconv.Itoa(ev.MarginV))
		evarr = append(evarr, ev.Effect)
		evarr = append(evarr, ev.Text)

		eventj := strings.Join(evarr, ",")
		evs = append(evs, eventj)
	}
	// evs = append(evs, "")
	evsLast := strings.Join(evs, "\n")
	fmt.Println(evsLast)
	return
}
